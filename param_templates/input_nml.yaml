---
perfect_model_obs_nml:
  read_input_state_from_file:
    values: .true.
  single_file_in:
    values: .false.
  input_state_files:
    $DATA_ASSIMILATION_OCN == True and $COMP_OCN == "pop": #note
      values: "'pop.r.nc'"
  init_time_days:
    values: -1
  init_time_seconds:
    values: -1

  write_output_state_to_file:
    values: .true.
  single_file_out:
    values: .false.
  output_state_files:
    values: "'perfect_restart.nc'"
  output_interval:
    values: 1

  async:
    values: 0
  adv_ens_command:
    values: "'no_CESM_advance_script'"

  obs_seq_in_file_name:
    values: "'obs_seq.in'"
  obs_seq_out_file_name:
    values: "'obs_seq.perfect'"
  first_obs_days:
    values: -1
  first_obs_seconds:
    values: -1
  last_obs_days:
    values: -1
  last_obs_seconds:
    values: -1

  trace_execution:
    values: .false.
  output_timestamps:
    values: .false.
  print_every_nth_obs:
    values: -1
  output_forward_op_errors:
    values: .false.
  silence:
    values: .false.

filter_nml:
  async:
    values: 0
  adv_ens_command:
    values: "'no_CESM_advance_script'"
  ens_size:
    $DATA_ASSIMILATION_OCN == True: #note
      values: $NINST_OCN
  obs_sequence_in_name:
    values: "'obs_seq.out'"
  obs_sequence_out_name:
    values: "'obs_seq.final'"
  input_state_file_list:
    values: "'restarts_in.txt'"
  output_state_file_list:
    values: "'restarts_out.txt'"
  init_time_days:
    values: -1
  init_time_seconds:
    values: -1
  first_obs_days:
    values: -1
  first_obs_seconds:
    values: -1
  last_obs_days:
    values: -1
  last_obs_seconds:
    values: -1
  num_output_state_members:
    values: 3,
  num_output_obs_members:
    $DATA_ASSIMILATION_OCN == True:
      values: $NINST_OCN
  output_interval:
    values: 1
  num_groups:
    values: 1
  distributed_state:
    values: .true.
  compute_posterior:
    values: .true.
  output_forward_op_errors:
    values: .false.
  output_timestamps:
    values: .false.
  trace_execution:
    values: .false.
  silence:
    values: .false.

  stages_to_write:
    values: "'preassim', 'output'"
  output_members:
    values: .true.
  output_mean:
    values: .true.
  output_sd:
    values: .true.
  write_all_stages_at_end:
    values: .true.

  inf_flavor:
    values: 5,                       0
  inf_initial_from_restart:
    values: .false.,                  .false.
  inf_sd_initial_from_restart:
    values: .false.,                  .false.
  inf_initial:
    values: 1.0,                     1.0
  inf_lower_bound:
    values: 0.0,                     0.0
  inf_upper_bound:
    values: 10.0,                    10.0
  inf_damping:
    values: 0.9,                     0.9
  inf_sd_initial:
    values: 0.6,                     0.6
  inf_sd_lower_bound:
    values: 0.6,                     0.6
  inf_sd_max_change:
    values: 1.05,                    1.05


# "buffer_state_io" must be true for 1/10th degree pop. 
# it can be false for smaller runs.

state_vector_io_nml:
  buffer_state_io:
    values:
      $OCN_GRID in ["tx0.1v2", "tx0.1v3"]: .true.
      else: .false.
  single_precision_output:
    values: .false.


# cutoff of 0.03 (radians) is about 200km
#
# "distribute_mean" must be true for 1/10th degree pop.  it runs
# slower than setting it false, but it won't run otherwise.
# if running a smaller pop case, use false to run faster.
#
assim_tools_nml:
  filter_kind:
    values: 1
  cutoff:
    values: 0.20
  sort_obs_inc:
    values: .false.
  spread_restoration:
    values: .false.
  sampling_error_correction:
    values: .false.
  adaptive_localization_threshold:
    values: -1
  output_localization_diagnostics:
    values: .false.
  localization_diagnostics_file:
    values: "'localization_diagnostics'"
  print_every_nth_obs:
    values: 0
  distribute_mean: # note
    values:
      $OCN_GRID in ["tx0.1v2", "tx0.1v3"]: .true.
      else: .false.

ensemble_manager_nml:
  tasks_per_node:
    values: 16
  layout:
    values: 2

cov_cutoff_nml:
  select_localization:
    values: 1

reg_factor_nml:
  select_regression:
    values: 1
  input_reg_file:
    values: "'time_mean_reg'"
  save_reg_diagnostics:
    values: .false.
  reg_diagnostics_file:
    values: "'reg_diagnostics'"

obs_sequence_nml:
  write_binary_obs_sequence:
    values: .false.
 
 
# These are some extra observations types available in obs_def_ocean_mod.f90
# These three are for the along-track sea surface anomalies
#                  'J1_SEA_SURFACE_ANOMALY', 
#                  'EN_SEA_SURFACE_ANOMALY', 
#                  'GFO_SEA_SURFACE_ANOMALY'

obs_kind_nml:
  assimilate_these_obs_types:
    $DATA_ASSIMILATION_OCN == True:
      values: |
        'SALINITY',         'TEMPERATURE',
                           'APB_SALINITY',     'APB_TEMPERATURE',
                          'ADCP_SALINITY',    'ADCP_TEMPERATURE',
                          'ARGO_SALINITY',    'ARGO_TEMPERATURE',
                        'BOTTLE_SALINITY',  'BOTTLE_TEMPERATURE',
                           'CTD_SALINITY',     'CTD_TEMPERATURE',
                           'DBT_SALINITY',     'DBT_TEMPERATURE',
                       'DRIFTER_SALINITY', 'DRIFTER_TEMPERATURE',
                         'FLOAT_SALINITY',   'FLOAT_TEMPERATURE',
                        'GLIDER_SALINITY',  'GLIDER_TEMPERATURE',
                           'MBT_SALINITY',     'MBT_TEMPERATURE',
                       'MOORING_SALINITY', 'MOORING_TEMPERATURE',
                           'STD_SALINITY',     'STD_TEMPERATURE',
                          'TCTD_SALINITY',    'TCTD_TEMPERATURE',
                           'XBT_SALINITY',     'XBT_TEMPERATURE',
                          'XCTD_SALINITY',    'XCTD_TEMPERATURE',
  evaluate_these_obs_types:
    $DATA_ASSIMILATION_OCN == True:
      values: |
        'SEA_SURFACE_HEIGHT',
        'U_CURRENT_COMPONENT',
        'V_CURRENT_COMPONENT'

quality_control_nml:
  input_qc_threshold:
    values: 1.0
  enable_special_outlier_code:
    values: .false.
  outlier_threshold:
    values: 3.0
 
preprocess_nml:
  input_obs_qty_mod_file: 
    values: "'${SRCROOT}/components/dart/DART/assimilation_code/modules/observations/DEFAULT_obs_kind_mod.F90'"
  output_obs_qty_mod_file: 
    values: "'${SRCROOT}/components/dart/DART/assimilation_code/modules/observations/obs_kind_mod.f90'"
  input_obs_def_mod_file: 
    values: "'${SRCROOT}/components/dart/DART/observations/forward_operators/DEFAULT_obs_def_mod.F90'"
  output_obs_def_mod_file: 
    values: "'${SRCROOT}/components/dart/DART/observations/forward_operators/obs_def_mod.f90'"
  obs_type_files: 
    values:
      $DATA_ASSIMILATION_OCN == True:
        "'${SRCROOT}/components/dart/DART/observations/forward_operators/obs_def_ocean_mod.f90'"
  quantity_files: 
    values: 
      $DATA_ASSIMILATION_OCN == True:
        "'${SRCROOT}/components/dart/DART/assimilation_code/modules/observations/ocean_quantities_mod.f90'"
# 
model_nml:
  assimilation_period_days:
    values: -1
  assimilation_period_seconds:
    values: -1
  model_perturbation_amplitude:
    values: 0.2
  binary_grid_file_format:
    values: "'big_endian'"
  mdt_reference_file_name:
    values: "'none'"
  debug:
    values: 0
  model_state_variables:
    $DATA_ASSIMILATION_OCN == True:
      values: |
         'SALT_CUR ', 'QTY_SALINITY             ', 'UPDATE',
         'TEMP_CUR ', 'QTY_POTENTIAL_TEMPERATURE', 'UPDATE',
         'UVEL_CUR ', 'QTY_U_CURRENT_COMPONENT  ', 'UPDATE',
         'VVEL_CUR ', 'QTY_V_CURRENT_COMPONENT  ', 'UPDATE',
         'PSURF_CUR', 'QTY_SEA_SURFACE_PRESSURE ', 'UPDATE'

location_nml:
  horiz_dist_only:
    values: .true.
  vert_normalization_pressure:
    values: 100000.0
  vert_normalization_height:
    values: 10000.0
  vert_normalization_level:
    values: 20.0
  approximate_distance:
    values: .false.
  nlon:
    values: 71
  nlat:
    values: 36
  output_box_info:
    values: .true.

fill_inflation_restart_nml:
  write_prior_inf:
    values: .true.
  prior_inf_mean:
    values: 1.01
  prior_inf_sd:
    values: 0.6

  write_post_inf:
    values: .false.
  post_inf_mean:
    values: 1.00
  post_inf_sd:
    values: 0.6

  input_state_files:
    values:
      $DATA_ASSIMILATION_OCN == True and $COMP_OCN == "pop":
        "'pop.r.nc'"
  single_file:
    values: .false.
  verbose:
    values: .false.

utilities_nml:
  TERMLEVEL:
    values: 1
  module_details:
    values: .false.
  logfilename:
    values: "'dart_log.out'"
  nmlfilename:
    values: "'dart_log.nml'"
 
# &mpi_utilities_nml
#   /
 
obs_sequence_tool_nml:
  num_input_files:
    values: 7
  filename_seq:
    values: |
     '../observations/ssh_pseudo.obs_seq.out',
     '../observations/gliders_t_pseudo.obs_seq.out',
     '../observations/drifters_u_pseudo.obs_seq.out',
     '../observations/drifters_v_pseudo.obs_seq.out',
     '../observations/adcp_u_pseudo.obs_seq.out',
     '../observations/adcp_v_pseudo.obs_seq.out',
     '../observations/tmi_pseudo.obs_seq.out'
  filename_out:
    values: "'obs_seq.out'"
  gregorian_cal: #note
    values: = '.true.' if $CALENDAR == "GREGORIAN" else '.false.'


# other possible obs tool namelist items:
#
# print out how many obs of each type are in the file:
#   print_only        = .true.
#
# keep only obs in time period:
#   first_obs_days    = -1
#   first_obs_seconds = -1
#   last_obs_days     = -1
#   last_obs_seconds  = -1
#
# keep only obs in a bounding box:
#   min_lat           = -90.0
#   max_lat           =  90.0
#   min_lon           =   0.0
#   max_lon           = 360.0
#
# keep only the U and V radiosonde winds:
#   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT',
#                        'RADIOSONDE_V_WIND_COMPONENT',
#   keep_types         = .true.
#
# remove the U and V radiosonde winds:
#   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT',
#                        'RADIOSONDE_V_WIND_COMPONENT',
#   keep_types         = .false.
#
# keep only observations with a DART QC of 0:
#   qc_metadata        = 'Dart quality control'
#   min_qc             = 0
#   max_qc             = 0
#
# keep only radiosonde temp obs between 250 and 300 K:
#   copy_metadata      = 'NCEP BUFR observation'
#   copy_type          = 'RADIOSONDE_TEMPERATURE'
#   min_copy           = 250.0
#   max_copy           = 300.0
#

# The times in the namelist for the obs_diag program are vectors
# that follow the following sequence:
# year   month   day   hour   minute   second
# max_num_bins can be used to specify a fixed number of bins,
# in which case last_bin_center should be safely in the future.
#
# Acceptable latitudes range from  [-90,  90]
# Acceptable longitudes range from [  0, Inf]
# 
obs_diag_nml:
  obs_sequence_name:
    values: "'obs_seq.final'"
  obs_sequence_list:
    values: "''"
  first_bin_center:
    values:  1998, 1, 3, 0, 0, 0
  last_bin_center:
    values:  1998, 2, 1, 0, 0, 0
  bin_separation:
    values:     0, 0, 1, 0, 0, 0
  bin_width:
    values:     0, 0, 1, 0, 0, 0
  time_to_skip:
    values:     0, 0, 0, 0, 0, 0
  max_num_bins:
    values: 1000
  trusted_obs:
    values: "'null'"
  Nregions:
    values: 4
  lonlim1:
    values: 30.0,  130.0, 290.0, 290
  lonlim2:
    values: 130.0, 270.0, 380.0, 380
  latlim1:
    values: -50.0, -50.0, -50.0,  20
  latlim2:
    values:  20.0,  50.0,  50.0,  50
  reg_names:
    values: "'Indian Ocean', 'Pacific', 'Atlantic', 'North Atlantic'"
  print_mismatched_locs:
    values: .false.
  create_rank_histogram:
    values: .true.
  outliers_in_histogram:
    values: .true.
  use_zero_error_obs:
    values: .false.
  verbose:
    values: .true.
  hlevel:
    values: |
        10.0,  20.0,   30.0,   40.0,  100.0,
        200.0, 500.0, 1000.0, 2000.0

schedule_nml:
  calendar:
    values: 
      $CALENDAR == "GREGORIAN":
        "'Gregorian'"
  first_bin_start:
    values:  1601,  1,  1,  0,  0,  0
  first_bin_end:
    values:  2999,  1,  1,  0,  0,  0
  last_bin_end:
    values:  2999,  1,  1,  0,  0,  0
  bin_interval_days:
    values: 1000000
  bin_interval_seconds:
    values: 0
  max_num_bins:
    values: 1000
  print_table:
    values: .true.

obs_seq_to_netcdf_nml:
  obs_sequence_name:
    values: "'obs_seq.final'"
  obs_sequence_list:
    values: "''"
  append_to_netcdf:
    values: .false.
  lonlim1:
    values:    0.0
  lonlim2:
    values:  360.0
  latlim1:
    values:  -90.0
  latlim2:
    values:   90.0
  verbose:
    values: .false.
 
model_mod_check_nml:
  input_state_files:
    values:
      $DATA_ASSIMILATION_OCN == True and $COMP_OCN == "pop":
        "'pop.r.nc'"
  output_state_files:
    values: "'mmc_output.nc'"
  test1thru:
    values: 0
  run_tests:
    values: 1, 2, 3, 4, 5, 7
  x_ind:
    values: 10
  loc_of_interest:
    values: 320.0, 18.0, 5.0
  quantity_of_interest:
    values: "'QTY_U_CURRENT_COMPONENT'"
  interp_test_lonrange:
    values: 0.0, 359.0
  interp_test_dlon:
    values: 1.0
  interp_test_latrange:
    values: -89.0, 89.0
  interp_test_dlat:
    values: 1.0
  interp_test_vertrange:
    values: 1000.0,  1005.0
  interp_test_dvert:
    values: 2000.0
  interp_test_vertcoord:
    values: "'VERTISHEIGHT'"
  verbose:
    values: .false.
...
